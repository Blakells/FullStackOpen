{"version":3,"sources":["components/Note.js","components/Notification.js","components/LoginForm.js","components/NoteForm.js","components/Togglable.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","NoteForm","createNote","useState","newNote","setNewNote","event","preventDefault","Math","random","target","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","displayName","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","noteFormRef","createRef","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","noteObject","current","returnedNote","concat","handleLogin","loginService","setItem","stringify","setTimeout","notesToShow","filter","name","map","i","key","find","n","changedNote","catch","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.466a5fbf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LoginForm = ({\r\n  handleSubmit,\r\n  handleUsernameChange,\r\n  handlePasswordChange,\r\n  username,\r\n  password\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          username\r\n          <input\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          password\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  handleUsernameChange: PropTypes.func.isRequired,\r\n  handlePasswordChange: PropTypes.func.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  password: PropTypes.string.isRequired\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useState } from 'react'\r\n\r\nconst NoteForm = ({ createNote }) => {\r\n  const [newNote, setNewNote] = useState('')\r\n\r\n  const handleChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    createNote({\r\n      content: newNote,\r\n      important: Math.random() > 0.5,\r\n    })\r\n\r\n    setNewNote('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"formDiv\">\r\n      <h2>Create a new note</h2>\r\n\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoteForm","import React, { useState, useImperativeHandle } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible} className=\"togglableContent\">\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nTogglable.displayName = 'Togglable'\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Togglable","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = async newObject => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n\r\n  const response = await axios.post(baseUrl, newObject, config)\r\n  return response.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, setToken }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport LoginForm from './components/LoginForm'\r\nimport NoteForm from './components/NoteForm'\r\nimport Togglable from './components/Togglable'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n\r\n  const noteFormRef = React.createRef()\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      setUser(user)\r\n      noteService.setToken(user.token)\r\n    }\r\n  }, [])\r\n\r\n  const addNote = (noteObject) => {\r\n    noteFormRef.current.toggleVisibility()\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(() => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n      })\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      const user = await loginService.login({\r\n        username, password,\r\n      })\r\n\r\n      window.localStorage.setItem(\r\n        'loggedNoteappUser', JSON.stringify(user)\r\n      )\r\n\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (exception) {\r\n      setErrorMessage('wrong credentials')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  const loginForm = () => (\r\n    <Togglable buttonLabel='login'>\r\n      <LoginForm\r\n        username={username}\r\n        password={password}\r\n        handleUsernameChange={({ target }) => setUsername(target.value)}\r\n        handlePasswordChange={({ target }) => setPassword(target.value)}\r\n        handleSubmit={handleLogin}\r\n      />\r\n    </Togglable>\r\n  )\r\n\r\n  const noteForm = () => (\r\n    <Togglable buttonLabel='new note' ref={noteFormRef}>\r\n      <NoteForm createNote={addNote} />\r\n    </Togglable>\r\n  )\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n\r\n      {user === null ?\r\n        loginForm() :\r\n        <div>\r\n          <p>{user.name} logged in</p>\r\n          {noteForm()}\r\n        </div>\r\n      }\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) =>\r\n          <Note\r\n            key={i}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}